//// File Name: RcppExports.cpp
//// File Version: 0.004035
// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>

using namespace Rcpp; using namespace arma;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// mnlfa_rcpp_plogis
double mnlfa_rcpp_plogis(double x);
RcppExport SEXP _mnlfa_mnlfa_rcpp_plogis(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(mnlfa_rcpp_plogis(x));
    return rcpp_result_gen;
END_RCPP
}
// mnlfa_rcpp_calc_probs_2pl
Rcpp::NumericMatrix mnlfa_rcpp_calc_probs_2pl(Rcpp::NumericMatrix a, Rcpp::NumericMatrix b, Rcpp::NumericMatrix theta, Rcpp::IntegerVector y, Rcpp::LogicalVector y_resp);
RcppExport SEXP _mnlfa_mnlfa_rcpp_calc_probs_2pl(SEXP aSEXP, SEXP bSEXP, SEXP thetaSEXP, SEXP ySEXP, SEXP y_respSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type a(aSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type y_resp(y_respSEXP);
    rcpp_result_gen = Rcpp::wrap(mnlfa_rcpp_calc_probs_2pl(a, b, theta, y, y_resp));
    return rcpp_result_gen;
END_RCPP
}
// mnlfa_rcpp_calc_dnorm
Rcpp::NumericMatrix mnlfa_rcpp_calc_dnorm(Rcpp::NumericMatrix a, Rcpp::NumericMatrix b, Rcpp::NumericMatrix psi, Rcpp::NumericMatrix theta, Rcpp::NumericVector y, Rcpp::LogicalVector y_resp);
RcppExport SEXP _mnlfa_mnlfa_rcpp_calc_dnorm(SEXP aSEXP, SEXP bSEXP, SEXP psiSEXP, SEXP thetaSEXP, SEXP ySEXP, SEXP y_respSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type a(aSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type y_resp(y_respSEXP);
    rcpp_result_gen = Rcpp::wrap(mnlfa_rcpp_calc_dnorm(a, b, psi, theta, y, y_resp));
    return rcpp_result_gen;
END_RCPP
}
// mnlfa_rcpp_calc_probs_gpcm
Rcpp::NumericMatrix mnlfa_rcpp_calc_probs_gpcm(Rcpp::NumericMatrix a, Rcpp::NumericMatrix b, Rcpp::NumericMatrix theta, Rcpp::NumericVector y, Rcpp::LogicalVector y_resp);
RcppExport SEXP _mnlfa_mnlfa_rcpp_calc_probs_gpcm(SEXP aSEXP, SEXP bSEXP, SEXP thetaSEXP, SEXP ySEXP, SEXP y_respSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type a(aSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type y_resp(y_respSEXP);
    rcpp_result_gen = Rcpp::wrap(mnlfa_rcpp_calc_probs_gpcm(a, b, theta, y, y_resp));
    return rcpp_result_gen;
END_RCPP
}
// mnlfa_rcpp_calc_probs_gpcm_deriv
Rcpp::List mnlfa_rcpp_calc_probs_gpcm_deriv(Rcpp::NumericVector a, Rcpp::NumericMatrix b, Rcpp::NumericMatrix theta, Rcpp::NumericVector y, Rcpp::LogicalVector y_resp, Rcpp::NumericMatrix Xdes_int, Rcpp::NumericMatrix Xdes_slo, int ind, bool is_b, int uu);
RcppExport SEXP _mnlfa_mnlfa_rcpp_calc_probs_gpcm_deriv(SEXP aSEXP, SEXP bSEXP, SEXP thetaSEXP, SEXP ySEXP, SEXP y_respSEXP, SEXP Xdes_intSEXP, SEXP Xdes_sloSEXP, SEXP indSEXP, SEXP is_bSEXP, SEXP uuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type y_resp(y_respSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Xdes_int(Xdes_intSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Xdes_slo(Xdes_sloSEXP);
    Rcpp::traits::input_parameter< int >::type ind(indSEXP);
    Rcpp::traits::input_parameter< bool >::type is_b(is_bSEXP);
    Rcpp::traits::input_parameter< int >::type uu(uuSEXP);
    rcpp_result_gen = Rcpp::wrap(mnlfa_rcpp_calc_probs_gpcm_deriv(a, b, theta, y, y_resp, Xdes_int, Xdes_slo, ind, is_b, uu));
    return rcpp_result_gen;
END_RCPP
}
// mnlfa_rcpp_mstep_trait_unidim_fun
double mnlfa_rcpp_mstep_trait_unidim_fun(Rcpp::NumericMatrix theta, Rcpp::NumericMatrix mu_p, Rcpp::NumericMatrix sigma_p, Rcpp::NumericMatrix post, Rcpp::NumericVector weights);
RcppExport SEXP _mnlfa_mnlfa_rcpp_mstep_trait_unidim_fun(SEXP thetaSEXP, SEXP mu_pSEXP, SEXP sigma_pSEXP, SEXP postSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type mu_p(mu_pSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type sigma_p(sigma_pSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type post(postSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(mnlfa_rcpp_mstep_trait_unidim_fun(theta, mu_p, sigma_p, post, weights));
    return rcpp_result_gen;
END_RCPP
}
// mnlfa_rcpp_mstep_trait_unidim_grad
Rcpp::NumericVector mnlfa_rcpp_mstep_trait_unidim_grad(Rcpp::NumericMatrix theta, Rcpp::NumericVector mu_p, Rcpp::NumericVector sigma_p, Rcpp::NumericMatrix post, int IM, int IS, Rcpp::NumericMatrix Xdes_mean, Rcpp::NumericMatrix Xdes_sd, Rcpp::NumericVector weights);
RcppExport SEXP _mnlfa_mnlfa_rcpp_mstep_trait_unidim_grad(SEXP thetaSEXP, SEXP mu_pSEXP, SEXP sigma_pSEXP, SEXP postSEXP, SEXP IMSEXP, SEXP ISSEXP, SEXP Xdes_meanSEXP, SEXP Xdes_sdSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mu_p(mu_pSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sigma_p(sigma_pSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type post(postSEXP);
    Rcpp::traits::input_parameter< int >::type IM(IMSEXP);
    Rcpp::traits::input_parameter< int >::type IS(ISSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Xdes_mean(Xdes_meanSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Xdes_sd(Xdes_sdSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(mnlfa_rcpp_mstep_trait_unidim_grad(theta, mu_p, sigma_p, post, IM, IS, Xdes_mean, Xdes_sd, weights));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mnlfa_mnlfa_rcpp_plogis", (DL_FUNC) &_mnlfa_mnlfa_rcpp_plogis, 1},
    {"_mnlfa_mnlfa_rcpp_calc_probs_2pl", (DL_FUNC) &_mnlfa_mnlfa_rcpp_calc_probs_2pl, 5},
    {"_mnlfa_mnlfa_rcpp_calc_dnorm", (DL_FUNC) &_mnlfa_mnlfa_rcpp_calc_dnorm, 6},
    {"_mnlfa_mnlfa_rcpp_calc_probs_gpcm", (DL_FUNC) &_mnlfa_mnlfa_rcpp_calc_probs_gpcm, 5},
    {"_mnlfa_mnlfa_rcpp_calc_probs_gpcm_deriv", (DL_FUNC) &_mnlfa_mnlfa_rcpp_calc_probs_gpcm_deriv, 10},
    {"_mnlfa_mnlfa_rcpp_mstep_trait_unidim_fun", (DL_FUNC) &_mnlfa_mnlfa_rcpp_mstep_trait_unidim_fun, 5},
    {"_mnlfa_mnlfa_rcpp_mstep_trait_unidim_grad", (DL_FUNC) &_mnlfa_mnlfa_rcpp_mstep_trait_unidim_grad, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_mnlfa(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
